{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Parameters" : {
    "myVpcId" : {
      "Description" : "VpcId",
      "Type" : "String"
    }
  },

  "Resources" : {

    "elbDockerEnv" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Metadata" : {
        "Comment" : "creating ELB with sticky sessions in case cluster size > 1"
      },
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LBCookieStickinessPolicy" : [
          {
            "PolicyName" : "MyLBPolicy"
          }
        ],
        "Listeners" : [
          {
            "InstancePort" : "80",
            "LoadBalancerPort" : "80",
            "Protocol" : "HTTP",
            "InstanceProtocol" : "HTTP",
            "PolicyNames" : [ "MyLBPolicy" ]
          }
        ],
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : "dockerenv"
          }
        ]
      }
    },

    "asgDockerEnv" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "DesiredCapacity" : "1",
        "HealthCheckGracePeriod" : "300",
        "HealthCheckType" : "EC2",
        "MaxSize" : "1",
        "MinSize" : "1",
        "LaunchConfigurationName" : {
          "Ref" : "lcDockerEnv"
        },
        "LoadBalancerNames" : [
          {
            "Ref" : "elbDockerEnv"
          }
        ],
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : "dockerenv",
            "PropagateAtLaunch" : true
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT15M"
        }
      }
    },

    "lcDockerEnv" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : { "Fn::Join" : ["", [
          "in user data\n",
          "- download docker-compose\n",
          "- put myregistry into /etc/hosts\n",
          "- declare myregistry as insecure (in order to use http) to docker daemon\n",
          "- start docker-compose with .yaml injected\n",
          "- send signal to ASG that stack creation is complete"
        ]]}
      },
      "Properties" : {
        "ImageId" : "ami-87564feb",
        "InstanceType" : "t2.micro",
        "KeyName" : "aws",
        "SecurityGroups" : [
          {
            "Ref" : "sgDockerEnv"
          }
        ],
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sda1",
            "Ebs" : {
              "VolumeSize" : 8
            }
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -ex\n",
          "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
          "apt-get update\n",
          "apt-get install -y apt-transport-https ca-certificates\n",
          "apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n",
          "sh -c '/bin/echo deb https://apt.dockerproject.org/repo ubuntu-trusty main > /etc/apt/sources.list.d/docker.list'\n",
          "apt-get update\n",
          "apt-get purge lxc-docker\n",
          "apt-get -y install docker-engine\n",
          "apt-get -y install python-pip\n",
          "apt-get -y install python-setuptools\n",
          "pip install docker-compose\n",
          "sudo sh -c 'echo \"54.93.68.174   myregistry\" >> /etc/hosts'\n",
          "cat << EOF >> /etc/default/docker\n",
          "DOCKER_OPTS=\"--insecure-registry myregistry:5000\"\n",
          "EOF\n",
          "service docker stop && service docker start\n",
          "cat << EOF | docker-compose -f - up -d\n",
"web:\n",
"  image: myregistry:5000/mynginx:latest\n",
"  expose:\n",
"    - \"80\"\n",
"  ports:\n",
"    - \"80:80\"\n",
"  links:\n",
"    - \"app-01\"\n",
"    - \"app-02\"\n",
"    - \"app-03\"\n",
"  hostname: \"web\"\n",
"\n",
"app-01:\n",
"  image: myregistry:5000/myjetty:latest\n",
"  expose:\n",
"    - \"8080\"\n",
"  ports:\n",
"    - \"8081:8080\"\n",
"  volumes_from:\n",
"    - \"data\"\n",
"  hostname: \"app-01\"\n",
"\n",
"app-02:\n",
"  image: myregistry:5000/myjetty:latest\n",
"  expose:\n",
"    - \"8080\"\n",
"  ports:\n",
"    - \"8082:8080\"\n",
"  volumes_from:\n",
"    - \"data\"\n",
"  hostname: \"app-02\"\n",
"\n",
"app-03:\n",
"  image: myregistry:5000/myjetty:latest\n",
"  expose:\n",
"    - \"8080\"\n",
"  ports:\n",
"    - \"8083:8080\"\n",
"  volumes_from:\n",
"    - \"data\"\n",
"  hostname: \"app-03\"\n",
"\n",
"# the data container is using the myjetty image in order to \n",
"# execute a chmod 777 on /Users from its Dockerfile so that\n",
"# prevayler can persist its memory objects. a solution using\n",
"# chown would make more sense of course, but this is still\n",
"# all a bit hacky in docker\n",
"\n",
"data:\n",
"  image: myregistry:5000/myjetty:latest\n",
"  volumes:\n",
"    - /Users\n",
          "EOF\n",
          "mkdir aws-cfn-bootstrap-latest\n",
          "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz ",
          "| tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
          "easy_install aws-cfn-bootstrap-latest\n",
          "/usr/local/bin/cfn-signal -e 0 --stack ", { "Ref": "AWS::StackName" },
          " --resource asgDockerEnv ",
          " --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },

    "sgDockerEnv" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "AutoScaling-Security-Group-1 (2016-03-27 12:37:49.933+02:00)",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress" : [
          {
            "IpProtocol" : "-1",
            "CidrIp" : "0.0.0.0/0"
          }
        ],
        "VpcId" : {
          "Ref" : "myVpcId"
        }
      }
    }
  },

  "Description" : "DockerEnv CloudFormation template"
}
